import telebot
from telebot import types
import shutil
from datetime import datetime

import threading
import time
from time import sleep

import sqlite3

admins = [543256966]

db = sqlite3.connect('base.db', check_same_thread=False)
sql = db.cursor()

sql.execute('''CREATE TABLE IF NOT EXISTS users (
    id INT,
    username TEXT,
    client BOOLEAN,
    ava_bot_num INT,
    ava_now INT,
    bun BOOLEAN,
    admin BOOLEAN
)''')
sql.execute('''CREATE TABLE IF NOT EXISTS clients_id (
    id INT
)''')
for admin in admins:
    sql.execute(f'SELECT id FROM users WHERE id = {admin}')
    if sql.fetchone() is None:
        sql.execute('INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?)', (543256966, None, None, None, None, None, 1))
    db.commit()
db.commit()

bots_picks=['AgACAgIAAxkBAAIDpWND3AN_1s1Ft-yzSiWLUSlCwBcoAAJkwzEbc8IhSkQuCh_0JO-_AQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDpmND3Am_A74i1te5V5E0PvUVypCyAAJmwzEbc8IhSn7_xJzBMeKaAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDp2ND3A32uQqv__fiTqeoUg-NUs3KAAJnwzEbc8IhSua5zTqXFxsAAQEAAwIAA3kAAyoE',
'AgACAgIAAxkBAAIDqGND3BEkCqRDiDAkkBcf1Dy4ORFhAAJowzEbc8IhSv2oSs_t3UOcAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDqWND3BVPDFyAsAIMNr-At07Hd4mlAAJpwzEbc8IhSilpZCPIyy85AQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDqmND3BgcaL7M5nfg3pNSjhd4X6m4AAJqwzEbc8IhSkxuXbsfAqNyAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDq2ND3BwmX1gjJtH93ENkXgE4DDLVAAJrwzEbc8IhSuCA0hei3cbZAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDrGND3B5OcyXNyA2B4L1QvIdixlvEAAJswzEbc8IhShktg84PgvZcAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDrWND3CFGM0yOL1Cx2MEpERhL9ZyEAAJtwzEbc8IhStN06cVcPzhCAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDrmND3CSUm6Jbj_twEa_USQ0vENjIAAJuwzEbc8IhSiEe9hBoAZHiAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDr2ND3CdzFc2CJqooSdgNVZZpcaCDAAJvwzEbc8IhSm8c020lwIyCAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDsGND3CrU_2tsEi_EwGZs6ztM6KieAAJxwzEbc8IhSlah3D4xv6jYAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDsWND3C3HFHqNnIohcHjCwmrWyhkjAAJywzEbc8IhSjzkCE-ypRduAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDsmND3C9NmrZREw0ByGiYrD6sSZC_AAJzwzEbc8IhSg33y8DagqohAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDs2ND3DmZLAITLHOVpLzEzgyjOElqAAJ1wzEbc8IhSgeuOnec6YT7AQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDtGND3DyZMTi2SQTEmz9kJpC3_PK7AAJ2wzEbc8IhSkVnLmBwqS7pAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDtWND3D-BeBqU2IdNEpm6tiivFQZ4AAJ3wzEbc8IhSm7liA_r-Bz1AQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDtmND3EGyNiVm-MqI3uWXJTZYYNBxAAJ4wzEbc8IhSsDDIWwwdok7AQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDt2ND3ERnY_GaG2S0X6pxp4I05WyzAAJ5wzEbc8IhSg2M_7ATmYlgAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDuGND3EcgjxFrT12kU5V_6sfPD9iLAAJ6wzEbc8IhSpb_NFjE49_iAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDuWND3ErBpxZbMIxbtJ4DJCpBhIE3AAJ7wzEbc8IhSuEZY4Qrb3_vAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDumND3Ew0VwqaubBwjulIMaTyCzjKAAJ8wzEbc8IhSuHvRBIQ47LtAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDu2ND3E65JZPh21CZ1cog_kIBKWC3AAJ9wzEbc8IhShEZ4qD7HrfYAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDvGND3FCmtchGdd-1-WdC9f0q9AbSAAJ-wzEbc8IhSnKZYxz5WX4pAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDvWND3Fbz_niMdL5GViz7rtESBWdZAAJ_wzEbc8IhSir4VEPJ_cDLAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDvmND3Fiw1Xzko50X_HkMXFWrSxIqAAKAwzEbc8IhSjIblxEZluMvAQADAgADeQADKgQ',
'AgACAgIAAxkBAAIDv2ND3Fuq509nWvIf26FsJuWCQHyWAAKCwzEbc8IhSqPae0o2Cl2IAQADAgADeQADKgQ']
annotation = 'üëæ–ë–æ—Ç `VK_HELPER` \- —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ —Ç–≤–æ—é –≥—Ä—É–ø–ø—É *–∑–∞ —Ç–µ–±—è*\!\n\nü•≥–ú–æ–∂–µ—à—å –∑–∞–±—ã—Ç—å –ø—Ä–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤\. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ –µ–º—É, __–æ—Ç–∫—É–¥–∞__ –±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∏ –æ–Ω —Å–¥–µ–ª–∞–µ—Ç –≤—Å—é —Ä–∞–±–æ—Ç—É *–∑–∞ —Ç–µ–±—è\!*'
annotation_not_admin = 'üëæ–ë–æ—Ç `VK_HELPER` \- —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ —Å–∞–º –¥–µ–ª–∞–µ—Ç –ø–æ—Å—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø –≤–æ *–í–∫–æ–Ω—Ç–∞–∫—Ç–µ\.*\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∑–Ω–∞–∫–æ–º—ã–µ *–∞–¥–º–∏–Ω—ã –≥—Ä—É–ø–ø –≤–∫,* –Ω–∞–ø–∏—à–∏ @UnicChan\!'
pricelist_text = '*¬´–¥–æ *`N`* –ø–∞–±–ª–∏–∫–æ–≤¬ª \-* —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±–æ—Ç—É –ø–∞–±–ª–∏–∫–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç ||–≤–æ—Ä–æ–≤–∞—Ç—å—Å—è|| –∫–æ–Ω—Ç–µ–Ω—Ç\.\n\n*¬´–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–∑ –≤ *`N`* —á–∞—Å–æ–≤¬ª \-* –∫–∞–∂–¥—ã–µ `N` —á–∞—Å–æ–≤ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å __—Ç–µ–±–µ –≤ –≥—Ä—É–ø–ø—É__\.\n\n*¬´booster¬ª \-* —É–º–µ–Ω—å—à–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –≤ —Ç–≤–æ—é –≥—Ä—É–ø–ø—É\.'
referal_text = '–° –ø–æ–º–æ—â—å—é `—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã` —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–µ —Ç–æ–ª—å–∫–æ __—Å—ç–∫–æ–Ω–æ–º–∏—Ç—å__ –Ω–∞ –ø–æ–∫—É–ø–∫–µ –±–æ—Ç–∞, –Ω–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ—Ç–∞ *–±–µ—Å–ø–ª–∞—Ç–Ω–æ\!*\n\n||–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∑–Ω–∞–∫–æ–º—ã–µ –∞–¥–º–∏–Ω—ã, —Ç–æ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å\! –£—Ç–æ—á–Ω—è–π —É @UnicChan\.||'
what_i_will_get = 'üë©üèª‚Äçüé§–¢—ã *–±–µ—Å–ø–ª–∞—Ç–Ω–æ* –ø–æ–ª—É—á–∏—à—å *—É–Ω–∏–∫–∞–ª—å–Ω—É—é* –∞–≤–∞—Ç–∞—Ä–∫—É —Å –æ–¥–Ω–∏–º –∏–∑ –Ω–∞—à–∏—Ö `–±–æ—Ç–æ–≤`. –¢–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ *3* —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Ä—è–¥–∞ –¥–ª—è –Ω–µ–≥–æ, –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å *–ª—é–±–æ–≥–æ!*\n\nüåü–¶–µ–Ω–∞ –∑–∞ *–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é* gif\'–∫—É —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç *300‚ÇΩ*. –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ `VK_HELPER` –∏ —Ç—Ä–∞—Ñ—Ñ–µ—Ä–æ–≤ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è *–±–µ—Å–ø–ª–∞—Ç–Ω–æ!*\n\n_–ü—Ä–∏–º–µ—Ä—ã –∞–≤–∞—Ç–∞—Ä–æ–∫:_'

bot = telebot.TeleBot('5695964341:AAEdDWX8E58p8F73pYRVVc6Brl-mVEeqn5k')

def print_time_now():
    time = datetime.now()
    time = time.strftime('%m-%d %H:%M:%S')
    print(f'--{time}--')

def make_user(message):
    sql.execute(f'SELECT id FROM users WHERE id = {message.from_user.id}')
    if sql.fetchone() is None: #–µ—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç
        sql.execute('INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?)', (message.from_user.id, f'@{message.from_user.username}', False, None, None, False, 0))
        db.commit()
        print(f'{print_time_now()}\n@{message.from_user.username} ({message.from_user.id}) –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞!')
    else:
        sql.execute(f'SELECT id FROM clients_id WHERE id = {message.from_user.id}')
        if not sql.fetchone() is None: #–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç
            sql.execute(f'UPDATE users SET client = {True} WHERE id = {message.from_user.id}')
            db.commit()
        db.commit()
    db.commit()

while True:
    try:
        @bot.message_handler(commands=['start']) #—Å—Ç–∞—Ä—Ç
        def start(message):
            bot.delete_message(message.chat.id, message.message_id)
            if message.chat.type == 'private':
                make_user(message)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                client = types.KeyboardButton('üß¨\n–Ø –≤–ª–∞–¥–µ–ª–µ—Ü VK_HELPER')
                guest = types.KeyboardButton('üëÄ\n–Ø –ø—Ä–æ—Å—Ç–æ –≥–æ—Å—Ç—å')

                markup.add(client, guest)
                bot.send_message(message.chat.id, 'ü¶æ')
                bot.send_message(message.chat.id, '<b>–ë–æ—Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–±—è!</b>\n–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç–∞–∫–æ–µ <b>VK_HELPER</b> –∏ –≤—ã–±—Ä–∞—Ç—å —Å–µ–±–µ <u>–±–æ—Ç–∞</u>, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!', parse_mode='html', reply_markup=markup)
            else:
                bot.delete_message(message.chat.id, message.message_id)
                bot.send_message(message.chat.id, '–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π ü¶æ')

        @bot.message_handler(commands=['faq']) #—Å—Ç–∞—Ä—Ç
        def faq(message):
            bot.delete_message(message.chat.id, message.message_id)
            markup = types.InlineKeyboardMarkup(row_width=2)
            group_admin = types.InlineKeyboardButton('–¥–∞', callback_data='group_admin')
            not_group_admin = types.InlineKeyboardButton('–Ω–µ—Ç', callback_data='not_group_admin')

            markup.add(group_admin, not_group_admin)
            bot.send_message(message.chat.id, '–¢—ã –∞–¥–º–∏–Ω *–≤–∫ –≥—Ä—É–ø–ø—ã/–≥—Ä—É–ø–ø?*', parse_mode='Markdown', reply_markup=markup)

        @bot.message_handler(content_types=["photo"])
        def confirming(message):
            photo = max(message.photo, key=lambda x: x.height)
            print(photo.file_id)

        @bot.message_handler(content_types=['text']) #–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        def bot_message(message):
            bot.delete_message(message.chat.id, message.message_id)
            if message.chat.type == 'private':
                sql.execute(f'SELECT bun FROM users WHERE id = {message.from_user.id}')
                bun = sql.fetchone()[0]
                db.commit()
                if not bun:
                    if '–≤–ª–∞–¥–µ–ª–µ—Ü' in message.text:
                        client = False
                        sql.execute(f'SELECT client FROM users WHERE id = {message.from_user.id}')
                        if sql.fetchone()[0] == True:
                            client = True
                        db.commit()

                        if client:
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            avatar = types.KeyboardButton('üëæ\n–ë–æ—Ç—ã')

                            markup.add(avatar)
                            bot.send_message(message.chat.id, '<b>üíª –ú–µ–Ω—é</b>', parse_mode='html', reply_markup=markup)
                            db.commit()
                        else:
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            guest = types.KeyboardButton('üëÄ\n–Ø –ø—Ä–æ—Å—Ç–æ –≥–æ—Å—Ç—å')

                            markup.add(guest)
                            bot.send_message(message.chat.id, 'üö® `–æ—à–∏–±–∫–∞` üö®\n\n*–ë–æ—Ç—ã* –∏–∑–≤–∏–Ω—è—é—Ç—Å—è, –Ω–æ –Ω–µ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±—è –≤ —Å–≤–æ–µ–π *–±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.*', parse_mode='Markdown', reply_markup=markup)

                    elif '–≥–æ—Å—Ç—å' in message.text:
                        client = False
                        sql.execute(f'SELECT client FROM users WHERE id = {message.from_user.id}')
                        if sql.fetchone()[0] == True:
                            client = True
                        db.commit()

                        if not client:
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            wtf = types.KeyboardButton('üßê\n–ß—Ç–æ —è –ø–æ–ª—É—á—É?')
                            avatar = types.KeyboardButton('üëæ\n–ë–æ—Ç—ã')
                            what_is = types.KeyboardButton('–ß—Ç–æ —Ç–∞–∫–æ–µ VK_HELPER‚ùì')

                            markup.add(wtf, avatar, what_is)
                            bot.send_message(message.chat.id, '<b>üíª –ú–µ–Ω—é</b>', parse_mode='html', reply_markup=markup)
                        else:
                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                            avatar = types.KeyboardButton('üëæ\n–ë–æ—Ç—ã')

                            markup.add(avatar)
                            bot.send_message(message.chat.id, '<b>–ë–æ—Ç—ã —É–∑–Ω–∞—é—Ç —Ç–µ–±—è –∏ –Ω–µ –º–æ–≥—É—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ —Ç–µ–±–µ –∫–∞–∫ –∫ –≥–æ—Å—Ç—é.</b>', parse_mode='html', reply_markup=markup)

                    elif '–ë–æ—Ç—ã' in message.text:
                        # sql.execute(f'SELECT client FROM users WHERE id = {message.from_user.id}')
                        markup = types.InlineKeyboardMarkup(row_width=5)
                        bot_1 = types.InlineKeyboardButton('1', callback_data='av_1')
                        bot_2 = types.InlineKeyboardButton('2', callback_data='av_2')
                        bot_3 = types.InlineKeyboardButton('3', callback_data='av_3')
                        bot_4 = types.InlineKeyboardButton('4', callback_data='av_4')
                        bot_5 = types.InlineKeyboardButton('5', callback_data='av_5')
                        bot_6 = types.InlineKeyboardButton('6', callback_data='av_6')
                        bot_7 = types.InlineKeyboardButton('7', callback_data='av_7')
                        bot_8 = types.InlineKeyboardButton('8', callback_data='av_8')
                        bot_9 = types.InlineKeyboardButton('9', callback_data='av_9')
                        bot_10 = types.InlineKeyboardButton('10', callback_data='av_10')
                        bot_next = types.InlineKeyboardButton('==>', callback_data='next_2')

                        markup.add(bot_1, bot_2, bot_3, bot_4, bot_5, bot_6, bot_7, bot_8, bot_9, bot_10, bot_next)
                        bot.send_photo(message.chat.id, 'AgACAgIAAxkBAAIDmmND2ft4vQOra-wQWrLp_Z0hhlf1AAJWwzEbc8IhSu3iRCmmwuwVAQADAgADeQADKgQ', reply_markup=markup)

                    elif '–ß—Ç–æ —Ç–∞–∫–æ–µ' in message.text:
                        markup = types.InlineKeyboardMarkup(row_width=2)
                        group_admin = types.InlineKeyboardButton('–¥–∞', callback_data='group_admin')
                        not_group_admin = types.InlineKeyboardButton('–Ω–µ—Ç', callback_data='not_group_admin')

                        markup.add(group_admin, not_group_admin)
                        bot.send_message(message.chat.id, '–¢—ã –∞–¥–º–∏–Ω *–≤–∫ –≥—Ä—É–ø–ø—ã/–≥—Ä—É–ø–ø?*', parse_mode='Markdown', reply_markup=markup)

                    elif '–ø–æ–ª—É—á—É' in message.text:
                        markup = types.InlineKeyboardMarkup(row_width=2)
                        free_avatars = types.InlineKeyboardButton('‚ú®–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è‚ú®', callback_data='free_avatars')
                        animated_avatars = types.InlineKeyboardButton('‚ö°Ô∏è–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è‚ö°Ô∏è', callback_data='animated_avatars')

                        markup.add(free_avatars, animated_avatars)
                        bot.send_message(message.chat.id, what_i_will_get, parse_mode='Markdown', reply_markup=markup)

                    elif '—á–µ–∫–∞–¥–º–∏–Ω' in message.text:
                        if message.from_user.id in admins:
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            add_client_id = types.InlineKeyboardButton('–¥–æ–±–∞–≤–∏—Ç—å client_id', callback_data='add_client_id')

                            markup.add(add_client_id)

                            bot.send_message(message.chat.id, '—á—ë –Ω–∞–¥–æ?', reply_markup=markup)

                    else:
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        client = types.KeyboardButton('üß¨\n–Ø –≤–ª–∞–¥–µ–ª–µ—Ü VK_HELPER')
                        guest = types.KeyboardButton('üëÄ\n–Ø –ø—Ä–æ—Å—Ç–æ –≥–æ—Å—Ç—å')

                        markup.add(client, guest)
                        bot.send_message(message.chat.id, '–ë–æ—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç —Ç–µ–±–µ!', reply_markup=markup)
                else:
                    bot.delete_message(message.chat.id, message.message_id)
                    bot.send_photo(message.chat.id, 'AgACAgIAAxkBAAIDm2ND2hiVm8VGaPSa--PuRynWZTdwAAJYwzEbc8IhSjQPGYrZXhrQAQADAgADeQADKgQ', caption='–¢–≤–æ—ë –ø–æ–≤–µ–¥–µ–Ω–∏–µ _–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å_ *–±–æ—Ç–∞–º*. –û–Ω–∏ `–Ω–µ –±—É–¥—É—Ç` —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ç–µ–±—è, –ø–æ–∫–∞ @UnicChan –Ω–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç —Å —Ç–æ–±–æ–π üò°', parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
            else:
                bot.delete_message(message.chat.id, message.message_id)
                bot.send_message(message.chat.id, '–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π ü¶æ')

        @bot.callback_query_handler(func=lambda call: True) #–æ–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
        def callback_inline(call):
            try:
                if call.message:
                    sql.execute(f'SELECT bun FROM users WHERE id = {call.from_user.id}')
                    bun = sql.fetchone()[0]
                    db.commit()
                    if not bun:
                        if call.data == 'next_1' or ( call.data.startswith('back_') and int(call.data.replace('back_', '')) in range(1, 11)):
                            bot.answer_callback_query(call.id)
                            markup = types.InlineKeyboardMarkup(row_width=5)
                            bot_1 = types.InlineKeyboardButton('1', callback_data='av_1')
                            bot_2 = types.InlineKeyboardButton('2', callback_data='av_2')
                            bot_3 = types.InlineKeyboardButton('3', callback_data='av_3')
                            bot_4 = types.InlineKeyboardButton('4', callback_data='av_4')
                            bot_5 = types.InlineKeyboardButton('5', callback_data='av_5')
                            bot_6 = types.InlineKeyboardButton('6', callback_data='av_6')
                            bot_7 = types.InlineKeyboardButton('7', callback_data='av_7')
                            bot_8 = types.InlineKeyboardButton('8', callback_data='av_8')
                            bot_9 = types.InlineKeyboardButton('9', callback_data='av_9')
                            bot_10 = types.InlineKeyboardButton('10', callback_data='av_10')
                            page_count = types.InlineKeyboardButton('1/3', callback_data='pass')
                            bot_next = types.InlineKeyboardButton('==>', callback_data='next_2')

                            markup.add(bot_1, bot_2, bot_3, bot_4, bot_5, bot_6, bot_7, bot_8, bot_9, bot_10, page_count,bot_next)
                            photo = 'AgACAgIAAxkBAAID0mND4eW9xTiRdL3oGRiK4P9a2YKIAAJWwzEbc8IhSu3iRCmmwuwVAQADAgADeQADKgQ'
                            try:
                                bot.edit_message_media(types.InputMediaPhoto(photo), call.message.chat.id, call.message.message_id, reply_markup=markup)
                            except:
                                bot.answer_callback_query(call.id, 'üí¨ –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üí¨', show_alert=True)
                        elif call.data == 'next_2' or ( call.data.startswith('back_') and int(call.data.replace('back_', '')) in range(11, 21)):
                            bot.answer_callback_query(call.id)
                            markup = types.InlineKeyboardMarkup(row_width=5)
                            bot_11 = types.InlineKeyboardButton('1', callback_data='av_11')
                            bot_12 = types.InlineKeyboardButton('2', callback_data='av_12')
                            bot_13 = types.InlineKeyboardButton('3', callback_data='av_13')
                            bot_14 = types.InlineKeyboardButton('4', callback_data='av_14')
                            bot_15 = types.InlineKeyboardButton('5', callback_data='av_15')
                            bot_16 = types.InlineKeyboardButton('6', callback_data='av_16')
                            bot_17 = types.InlineKeyboardButton('7', callback_data='av_17')
                            bot_18 = types.InlineKeyboardButton('8', callback_data='av_18')
                            bot_19 = types.InlineKeyboardButton('9', callback_data='av_19')
                            bot_20 = types.InlineKeyboardButton('10', callback_data='av_20')
                            bot_prev = types.InlineKeyboardButton('<==', callback_data='next_1')
                            page_count = types.InlineKeyboardButton('2/3', callback_data='pass')
                            bot_next = types.InlineKeyboardButton('==>', callback_data='next_3')

                            markup.add(bot_11, bot_12, bot_13, bot_14, bot_15, bot_16, bot_17, bot_18, bot_19, bot_20, bot_prev, page_count, bot_next)
                            photo = 'AgACAgIAAxkBAAIDoWND2sz9_0dVUNvqfmDb3vbhzJ5UAAJcwzEbc8IhSuHhO-rBDqeMAQADAgADeQADKgQ'
                            try:
                                bot.edit_message_media(types.InputMediaPhoto(photo), call.message.chat.id, call.message.message_id, reply_markup=markup)
                            except:
                                bot.answer_callback_query(call.id, 'üí¨ –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üí¨', show_alert=True)

                        elif call.data == 'next_3' or ( call.data.startswith('back_') and int(call.data.replace('back_', '')) in range(21, 28)):
                            bot.answer_callback_query(call.id)
                            markup = types.InlineKeyboardMarkup(row_width=5)
                            bot_21 = types.InlineKeyboardButton('1', callback_data='av_21')
                            bot_22 = types.InlineKeyboardButton('2', callback_data='av_22')
                            bot_23 = types.InlineKeyboardButton('3', callback_data='av_23')
                            bot_24 = types.InlineKeyboardButton('4', callback_data='av_24')
                            bot_25 = types.InlineKeyboardButton('5', callback_data='av_25')
                            bot_26 = types.InlineKeyboardButton('6', callback_data='av_26')
                            bot_27 = types.InlineKeyboardButton('7', callback_data='av_27')
                            empty_28 = types.InlineKeyboardButton('8', callback_data='empty')
                            empty_29 = types.InlineKeyboardButton('9', callback_data='empty')
                            empty_30 = types.InlineKeyboardButton('10', callback_data='empty')
                            bot_prev = types.InlineKeyboardButton('<==', callback_data='next_2')
                            page_count = types.InlineKeyboardButton('3/3', callback_data='pass')

                            markup.add(bot_21, bot_22, bot_23, bot_24, bot_25, bot_26, bot_27, empty_28, empty_29, empty_30, bot_prev, page_count)
                            photo = 'AgACAgIAAxkBAAIDomND2uijG__ZqFzEy28J6alBrwoVAAJdwzEbc8IhSj9VUobsJi_PAQADAgADeQADKgQ'
                            try:
                                bot.edit_message_media(types.InputMediaPhoto(photo), call.message.chat.id, call.message.message_id, reply_markup=markup)
                            except:
                                bot.answer_callback_query(call.id, 'üí¨ –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üí¨', show_alert=True)
                                
                        elif call.data.startswith('av_'):
                            bot.answer_callback_query(call.id)
                            avatar_num = call.data.replace('av_', '')
                            sql.execute(f'UPDATE users SET ava_now = {int(avatar_num)} WHERE id = {call.from_user.id}')
                            db.commit()
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            yes = types.InlineKeyboardButton('—ç—Ç–æ–≥–æ!', callback_data='yes')
                            sql.execute(f'SELECT ava_now FROM users WHERE id = {call.from_user.id}')
                            ava_now = sql.fetchone()[0]
                            db.commit()
                            back = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data=f'back_{ava_now}')

                            markup.add(yes, back)
                            photo = bots_picks[int(avatar_num)-1]
                            bot.edit_message_media(types.InputMediaPhoto(photo), call.message.chat.id, call.message.message_id, reply_markup=markup)

                        elif call.data == 'yes':
                            bot.answer_callback_query(call.id)
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            commit = types.InlineKeyboardButton('–¥–∞', callback_data='commit')
                            no = types.InlineKeyboardButton('–Ω–µ—Ç', callback_data='no')

                            markup.add(commit, no)
                            bot.send_message(call.message.chat.id, '–¢—ã —É–≤–µ—Ä–µ–Ω –≤ –≤—ã–±–æ—Ä–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞?', reply_markup=markup)

                        elif call.data == 'no':
                            bot.answer_callback_query(call.id, '–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è, –æ–Ω –Ω–µ —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª—Å—è üëæ')
                            bot.delete_message(call.message.chat.id, call.message.id)

                        elif call.data == 'commit':
                            sql.execute(f'SELECT ava_now FROM users WHERE id = {call.from_user.id}')
                            ava_now = sql.fetchone()[0]
                            db.commit()
                            sql.execute(f'UPDATE users SET ava_bot_num = {ava_now} WHERE id = {call.from_user.id}')
                            db.commit()
                            bot.answer_callback_query(call.id, '–•–æ—Ä–æ—à–æ!\n\n–°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è UnicChan!', show_alert=True)

                            bot.delete_message(call.message.chat.id, call.message.id)

                            markup = types.InlineKeyboardMarkup(row_width=2)
                            bun = types.InlineKeyboardButton('–±–∞–Ω –Ω–∞—Ö—É–π', callback_data='bun')
                            unbun = types.InlineKeyboardButton('—Ä–∞–∑–±–∞–Ω', callback_data='unbun')

                            markup.add(bun, unbun)
                            sql.execute(f'SELECT client FROM users WHERE id = {call.from_user.id}')
                            if sql.fetchone()[0] == True:
                                bot.send_message(543256966, f'@{call.from_user.username} (`{call.from_user.id}`)\n—Ö–æ—á–µ—Ç –±–æ—Ç–∞ *‚Ññ{ava_now}*!', parse_mode='Markdown', reply_markup=markup)
                            else:
                                bot.send_message(543256966, f'@{call.from_user.username} (`{call.from_user.id}`)\n—Ö–æ—á–µ—Ç –±–æ—Ç–∞ *‚Ññ{ava_now}* `–Ω–µ client`', parse_mode='Markdown', reply_markup=markup)

                        elif call.data == 'group_admin':
                            bot.answer_callback_query(call.id)
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            trailer = types.InlineKeyboardButton('—Ç—Ä–µ–π–ª–µ—Ä üé•', callback_data='trailer')
                            pricelist = types.InlineKeyboardButton('–ø—Ä–∞–π—Å–ª–∏—Å—Ç üßæ', callback_data='pricelist')
                            referal = types.InlineKeyboardButton('—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞ ü´Ç', callback_data='referal')
                            coming_soon = types.InlineKeyboardButton('—Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è üåö', callback_data='coming_soon')
                            close = types.InlineKeyboardButton('–∑–∞–∫—Ä—ã—Ç—å ‚ùå', callback_data='del')

                            markup.add(trailer, pricelist, referal, coming_soon, close)
                            try:
                                bot.edit_message_text(annotation, call.message.chat.id, call.message.id, parse_mode='MarkdownV2', reply_markup=markup)
                            except:
                                bot.delete_message(call.message.chat.id, call.message.message_id)
                                bot.send_message(call.message.chat.id, annotation, parse_mode='MarkdownV2', reply_markup=markup)

                        elif call.data == 'not_group_admin':
                            bot.answer_callback_query(call.id)
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            trailer = types.InlineKeyboardButton('—Ç—Ä–µ–π–ª–µ—Ä üé•', callback_data='trailer_not_admin')
                            traffer = types.InlineKeyboardButton('–¥–ª—è —Ç—Ä–∞—Ñ—Ñ–µ—Ä–æ–≤', callback_data='traffer')
                            close = types.InlineKeyboardButton('–∑–∞–∫—Ä—ã—Ç—å ‚ùå', callback_data='del')

                            markup.add(trailer, traffer, close)
                            try:
                                bot.edit_message_text(annotation_not_admin, call.message.chat.id, call.message.id, parse_mode='MarkdownV2', reply_markup=markup)
                            except:
                                bot.delete_message(call.message.chat.id, call.message.message_id)
                                bot.send_message(call.message.chat.id, annotation_not_admin, parse_mode='MarkdownV2', reply_markup=markup)

                        elif 'trailer' in call.data:
                            bot.delete_message(call.message.chat.id, call.message.message_id)
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            if not 'not_admin' in call.data:
                                back = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥ üîô', callback_data='group_admin')
                            else:
                                back = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥ üîô', callback_data='not_group_admin')

                            markup.add(back)
                            trailer = 'BAACAgIAAxkBAAIDDGNDVhDT3Volfq62-KY6HXSMlXNuAAKkHgACeRoYStrKdx3sKaykKgQ'
                            bot.send_video(call.message.chat.id, trailer, reply_markup=markup)

                        elif call.data == 'pricelist':
                            bot.delete_message(call.message.chat.id, call.message.message_id)
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            back = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥ üîô', callback_data='group_admin')

                            markup.add(back)
                            bot.send_photo(call.message.chat.id, 'AgACAgIAAxkBAAIDjmND2VUtbth_9BEkrxzJVsHj8c_tAAJOwzEbc8IhShwqn5RmaUq-AQADAgADeQADKgQ', reply_markup=markup, caption=pricelist_text, parse_mode='MarkdownV2')

                        elif call.data == 'referal':
                            bot.delete_message(call.message.chat.id, call.message.message_id)
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            back = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥ üîô', callback_data='group_admin')

                            markup.add(back)
                            bot.send_photo(call.message.chat.id, 'AgACAgIAAxkBAAIDj2ND2XUM3_ilfSb5tgPmfNHbC4_kAAJPwzEbc8IhSr3w_l_rywypAQADAgADeQADKgQ', reply_markup=markup, caption=referal_text, parse_mode='MarkdownV2')

                        elif call.data == 'coming_soon':
                            bot.delete_message(call.message.chat.id, call.message.message_id)
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            back = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥ üîô', callback_data='group_admin')

                            markup.add(back)
                            bot.send_photo(call.message.chat.id, 'AgACAgIAAxkBAAIDiWND2SUgfyi0C2I1AAF-xs6KlM8DlQACTMMxG3PCIUoV8rDQSX3AqgEAAwIAA3kAAyoE', reply_markup=markup, caption='`–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`', parse_mode='MarkdownV2')

                        elif call.data == 'traffer':
                            bot.answer_callback_query(call.id, '–ù–∞–ø–∏—à–∏ @UnicChan.\n–£ –Ω–µ–≥–æ –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!', show_alert=True)

                        elif call.data == 'avatars':
                            bot.delete_message(call.message.chat.id, call.message.message_id)
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            free_avatars = types.InlineKeyboardButton('‚ú®–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è‚ú®', callback_data='free_avatars')
                            animated_avatars = types.InlineKeyboardButton('‚ö°Ô∏è–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è‚ö°Ô∏è', callback_data='animated_avatars')

                            markup.add(free_avatars, animated_avatars)
                            bot.send_message(call.message.chat.id, '–¢—ã *–±–µ—Å–ø–ª–∞—Ç–Ω–æ* –ø–æ–ª—É—á–∏—à—å *—É–Ω–∏–∫–∞–ª—å–Ω—É—é* –∞–≤–∞—Ç–∞—Ä–∫—É —Å –æ–¥–Ω–∏–º –∏–∑ –Ω–∞—à–∏—Ö `–±–æ—Ç–æ–≤`. –¢–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ _3 —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Ä—è–¥–∞_ –¥–ª—è –Ω–µ–≥–æ, –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å *–ª—é–±–æ–≥–æ!*\n\n–¶–µ–Ω–∞ –∑–∞ _–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é_ gif\'–∫—É —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 300*‚ÇΩ*. –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ `VK_HELPER` –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è *–±–µ—Å–ø–ª–∞—Ç–Ω–æ!*\n\n–ü—Ä–∏–º–µ—Ä—ã –∞–≤–∞—Ç–∞—Ä–æ–∫:', parse_mode='Markdown', reply_markup=markup)

                        elif call.data == 'free_avatars':
                            bot.delete_message(call.message.chat.id, call.message.message_id)
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            back = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥ üîô', callback_data='avatars')

                            markup.add(back)
                            bot.send_photo(call.message.chat.id, 'AgACAgIAAxkBAAIDnGND2j_vw-CnUMyVX73FxWO8y9MfAAJZwzEbc8IhSlsqrp2Q-GjzAQADAgADeQADKgQ', reply_markup=markup)

                        elif call.data == 'animated_avatars':
                            bot.delete_message(call.message.chat.id, call.message.message_id)
                            markup = types.InlineKeyboardMarkup(row_width=2)
                            back = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥ üîô', callback_data='avatars')

                            markup.add(back)
                            animated_avatars = 'CgACAgIAAxkBAAIDz2ND4L_lTDkCw2XE-N-eL9UD1j7fAAIQHQACc8IhSodhvkQNcGRZKgQ'
                            bot.send_animation(call.message.chat.id, animated_avatars, reply_markup=markup)

                        elif call.data == 'del':
                            bot.delete_message(call.message.chat.id, call.message.message_id)

                        elif call.data == 'pass':
                            bot.answer_callback_query(call.id)

                    else:
                        bot.delete_message(call.message.chat.id, call.message.message_id)
                        bot.send_photo(call.message.chat.id, 'AgACAgIAAxkBAAIDm2ND2hiVm8VGaPSa--PuRynWZTdwAAJYwzEbc8IhSjQPGYrZXhrQAQADAgADeQADKgQ', caption='–¢–≤–æ—ë –ø–æ–≤–µ–¥–µ–Ω–∏–µ _–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å_ *–±–æ—Ç–∞–º*. –û–Ω–∏ `–Ω–µ –±—É–¥—É—Ç` —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ç–µ–±—è, –ø–æ–∫–∞ @UnicChan –Ω–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç —Å —Ç–æ–±–æ–π üò°', parse_mode='Markdown', reply_markup=types.ReplyKeyboardRemove())
                    
                    if call.data == 'add_client_id':
                        bot.answer_callback_query(call.id)
                        # sql.execute(f'SELECT client FROM users WHERE id = {message.from_user.id}')
                        @bot.message_handler(func=lambda message: True)
                        def input_id(message):
                            sent = bot.send_message(message.chat.id, "–ö–∏–Ω—å <b>id</b> –∫–ª–∏–µ–Ω—Ç–∞:", parse_mode='html')
                            bot.register_next_step_handler(sent, reg_id)
                        def reg_id(message):
                            client_id = int(message.text)
                            sql.execute(f'INSERT INTO clients_id VALUES ({client_id})')
                            db.commit()
                            bot.send_message(message.chat.id, '–î–æ–±–∞–≤–∏–ª')
                        input_id(call.message)

                    elif call.data == 'bun':
                        user_id = call.message.text.partition('(')[2]
                        user_id = user_id.partition(')')[0]
                        sql.execute(f'UPDATE users SET bun = {True} WHERE id = {int(user_id)}')
                        db.commit()
                        bot.answer_callback_query(call.id, f'{user_id} –∑–∞–±–∞–Ω–µ–Ω', show_alert=True)

                    elif call.data == 'unbun':
                        user_id = call.message.text.partition('(')[2]
                        user_id = user_id.partition(')')[0]
                        sql.execute(f'UPDATE users SET bun = {False} WHERE id = {int(user_id)}')
                        db.commit()
                        bot.answer_callback_query(call.id, f'{user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω', show_alert=True)

                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        client = types.KeyboardButton('üß¨\n–Ø –≤–ª–∞–¥–µ–ª–µ—Ü VK_HELPER')
                        guest = types.KeyboardButton('üëÄ\n–Ø –ø—Ä–æ—Å—Ç–æ –≥–æ—Å—Ç—å')

                        markup.add(client, guest)
                        bot.send_photo(user_id, 'AgACAgIAAxkBAAIDnmND2oyN7PxSlEzfuStuWl7VGCvNAAJawzEbc8IhSvWfW47Xd_X-AQADAgADeQADKgQ', caption='–¢—ã –±—ã–ª *—Ä–∞–∑–±–∞–Ω–µ–Ω*. –ë–æ–ª—å—à–µ —Ç–∞–∫ _–Ω–µ –¥–µ–ª–∞–π_ üôÇ', parse_mode='Markdown', reply_markup=markup)

            except Exception as e:
                print_time_now()
                print(f'–æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ inline –∫–Ω–æ–ø–∫–∏!\n{repr(e)}')

        bot.polling(none_stop=True)

    except Exception as e:
        print(e)
        print(print_time_now(), '–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ. –†–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É')
        sleep(1)
